@using Microsoft.AspNetCore.Identity
@using Microsoft.EntityFrameworkCore
@using WebApp.Models
@using WebApp.Models.ViewModels
@inject WebApp.Data.AppDbContext _context
@inject UserManager<Users> userManager

@{
    // Fetch data for dashboard
    var totalPatients = await _context.Users
        .Join(_context.UserRoles, u => u.Id, ur => ur.UserId, (u, ur) => new { u, ur })
        .Join(_context.Roles, x => x.ur.RoleId, r => r.Id, (x, r) => new { x.u, r })
        .CountAsync(x => x.r.Name == "Student");

    var totalAppointments = await _context.RoomAppointments.CountAsync();
    var upcomingAppointments = await _context.RoomAppointments.CountAsync(ra => ra.StartTime > DateTime.Now);
    var completedAppointments = await _context.RoomAppointments.CountAsync(ra => ra.EndTime < DateTime.Now);

    var pendingHealthRecords = await _context.SubmittedHealthDetails
        .CountAsync(s => s.BloodTypeStatus == "Pending" || s.AllergiesStatus == "Pending" ||
                         s.EmergencyContactNameStatus == "Pending" || s.EmergencyContactRelationshipStatus == "Pending" ||
                         s.EmergencyContactPhoneStatus == "Pending" || s.XRayFileStatus == "Pending" ||
                         s.MedicalCertificateStatus == "Pending" || s.VaccinationRecordStatus == "Pending" ||
                         s.OtherDocumentsStatus == "Pending");

    var alerts = await _context.HealthDetails
        .Where(h => h.HealthAlerts != null && h.HealthAlerts != "[]")
        .Select(h => h.HealthAlerts)
        .ToListAsync();
    var totalAlerts = alerts.Sum(a => System.Text.Json.JsonSerializer.Deserialize<List<string>>(a ?? "[]").Count);

    // For chart: appointments per month (last 6 months)
    var months = new List<string>();
    var appointmentsMonthly = new List<int>();
    for (int i = 5; i >= 0; i--)
    {
        var month = DateTime.Now.AddMonths(-i);
        months.Add(month.ToString("MMM"));
        var monthStart = new DateTime(month.Year, month.Month, 1);
        var monthEnd = monthStart.AddMonths(1).AddDays(-1);
        appointmentsMonthly.Add(await _context.RoomAppointments.CountAsync(ra => ra.StartTime >= monthStart && ra.StartTime <= monthEnd));
    }
}

<link rel="stylesheet" href="~/css/profile.css" asp-append-version="true" />
<script src="https://cdnjs.cloudflare.com/ajax/libs/Chart.js/3.7.1/chart.min.js"></script>

<style>
    /* ...copy the style block from _StudentDashboardPartial.cshtml... */
    :root {
        --primary-color: var(--bs-primary);
        --primary-light: #e6f2ff;
        --secondary-color: #f8f9fa;
        --text-dark: #343a40;
    }
    .bg-primary-soft { background-color: var(--primary-light); }
    .section-title { color: var(--primary-color); border-bottom: 2px solid var(--primary-color); padding-bottom: 0.5rem; margin-bottom: 1.5rem; }
    .dashboard-container { background-color: #fff; border-radius: 10px; box-shadow: 0 0 15px rgba(0,0,0,0.05); padding: 25px; margin-bottom: 25px; }
    .stats-box { padding: 15px; border-radius: 8px; box-shadow: 0 2px 5px rgba(0,0,0,0.08); transition: transform 0.2s; background-color: white; }
    .stats-box:hover { transform: translateY(-3px); }
    .progress-bar-primary { background-color: var(--primary-color); }
    .action-btn { background-color: var(--primary-color); color: white; padding: 10px 15px; border-radius: 5px; transition: all 0.3s; border: none; margin-bottom: 10px; text-align: left; display: block; text-decoration: none; }
    .action-btn:hover { background-color: var(--bs-secondary); transform: translateY(-2px); box-shadow: 0 4px 8px rgba(0,0,0,0.1); color: white; text-decoration: none; }
    .chart-container { height: 250px; position: relative; margin-bottom: 20px; }
    .appointment-table { width: 100%; border-collapse: collapse; }
    .appointment-table th { background-color: var(--primary-light); color: var(--text-dark); text-align: left; padding: 12px; }
    .appointment-table td { padding: 12px; border-bottom: 1px solid #eee; }
    .appointment-table tr:hover { background-color: #f8f9fa; }
    .activity-item { padding: 10px 0; border-bottom: 1px solid #eee; }
    .activity-item:last-child { border-bottom: none; }
    .badge-pending { background-color: #ffc107; color: #212529; }
    .badge-upcoming { background-color: var(--primary-color); color: white; }
    .badge-completed { background-color: #6c757d; color: white; }
    .badge-alert { background-color: #dc3545; color: white; }
    .status-badge { padding: 5px 10px; border-radius: 4px; font-size: 12px; font-weight: 500; }
</style>

<div class="container-fluid py-4">
    <div class="row">
        <!-- Main Content Section (8/12) -->
        <div class="col-lg-8">
            <!-- Overview -->
            <div class="dashboard-container">
                <h4 class="section-title">
                    <i class="fas fa-chart-line me-2"></i>Medical Staff Dashboard
                    <span class="float-end fs-6 text-muted">Updated: @DateTime.Now.ToString("MMM dd, h:mm tt")</span>
                </h4>
                <div class="row mb-4">
                    <div class="col-md-3">
                        <div class="stats-box text-center">
                            <h3 class="mb-1">@totalPatients</h3>
                            <p class="mb-1">Total Patients</p>
                        </div>
                    </div>
                    <div class="col-md-3">
                        <div class="stats-box text-center">
                            <h3 class="mb-1">@totalAppointments</h3>
                            <p class="mb-1">Total Appointments</p>
                        </div>
                    </div>
                    <div class="col-md-3">
                        <div class="stats-box text-center">
                            <h3 class="mb-1">@pendingHealthRecords</h3>
                            <p class="mb-1">Pending Health Records</p>
                        </div>
                    </div>
                    <div class="col-md-3">
                        <div class="stats-box text-center">
                            <h3 class="mb-1">@totalAlerts</h3>
                            <p class="mb-1">Active Alerts</p>
                        </div>
                    </div>
                </div>
                <div class="row">
                    <div class="col-md-6">
                        <h5 class="text-center mb-3">Appointments Trend (6 Months)</h5>
                        <div class="chart-container">
                            <canvas id="appointmentsTrendChart"
                                data-months="@string.Join(",", months)"
                                data-appointments="@string.Join(",", appointmentsMonthly)">
                            </canvas>
                        </div>
                    </div>
                    <div class="col-md-6">
                        <h5 class="text-center mb-3">Upcoming vs Completed</h5>
                        <div class="chart-container">
                            <canvas id="appointmentsStatusChart"
                                data-upcoming="@upcomingAppointments"
                                data-completed="@completedAppointments">
                            </canvas>
                        </div>
                    </div>
                </div>
            </div>
            <!-- Recent Appointments Table -->
            <div class="dashboard-container">
                <h4 class="section-title"><i class="fas fa-calendar-day me-2"></i>Recent Appointments</h4>
                <div class="table-responsive">
                    <table class="appointment-table">
                        <thead>
                            <tr>
                                <th>Room</th>
                                <th>Date & Time</th>
                                <th>Description</th>
                                <th>Booked</th>
                                <th>Status</th>
                            </tr>
                        </thead>
                        <tbody>
                            @{
                                var recentAppointments = await _context.RoomAppointments
                                    .OrderByDescending(ra => ra.StartTime)
                                    .Take(5)
                                    .Include(ra => ra.RoomAppointmentUsers)
                                    .ToListAsync();
                            }
                            @foreach (var appt in recentAppointments)
                            {
                                <tr>
                                    <td>@appt.RoomName</td>
                                    <td>@appt.StartTime.ToString("MMM dd, h:mm tt") <span class="text-muted">-</span> @appt.EndTime.ToString("h:mm tt")</td>
                                    <td>@appt.Description</td>
                                    <td>@appt.RoomAppointmentUsers.Count/@appt.UserLimit</td>
                                    <td>
                                        @if (appt.StartTime > DateTime.Now)
                                        {
                                            <span class="status-badge badge-upcoming">Upcoming</span>
                                        }
                                        else
                                        {
                                            <span class="status-badge badge-completed">Completed</span>
                                        }
                                    </td>
                                </tr>
                            }
                            @if (!recentAppointments.Any())
                            {
                                <tr>
                                    <td colspan="5" class="text-center py-4">No recent appointments</td>
                                </tr>
                            }
                        </tbody>
                    </table>
                </div>
            </div>
        </div>
        <!-- Right Sidebar (4/12) -->
        <div class="col-lg-4">
            <!-- Quick Actions -->
            <div class="dashboard-container">
                <h4 class="section-title"><i class="fas fa-bolt me-2"></i>Quick Actions</h4>
                <div class="d-grid gap-2">
                    <a href="@Url.Action("Index", "SubmittedHealthDetails")" class="action-btn">
                        <i class="fas fa-file-medical me-2"></i> Review Health Records
                    </a>
                    <a href="@Url.Action("Index", "RoomAppointment")" class="action-btn">
                        <i class="fas fa-calendar-plus me-2"></i> Manage Appointments
                    </a>
                    <a href="@Url.Action("Index", "UserHealthManagement")" class="action-btn">
                        <i class="fas fa-users me-2"></i> Patient List
                    </a>
                </div>
            </div>
            <!-- Alerts -->
            <div class="dashboard-container">
                <h4 class="section-title"><i class="fas fa-exclamation-triangle me-2"></i>Recent Alerts</h4>
                <div>
                    @{
                        var alertList = alerts.SelectMany(a => System.Text.Json.JsonSerializer.Deserialize<List<string>>(a ?? "[]")).Take(5).ToList();
                    }
                    @if (alertList.Any())
                    {
                        foreach (var alert in alertList)
                        {
                            <div class="activity-item py-2">
                                <span class="status-badge badge-alert">@alert</span>
                            </div>
                        }
                    }
                    else
                    {
                        <div class="text-center text-muted py-4">No active alerts</div>
                    }
                </div>
            </div>
        </div>
    </div>
</div>

<script>
document.addEventListener('DOMContentLoaded', function() {
    if (typeof Chart !== 'undefined') {
        // Appointments Trend Chart
        var trendCtx = document.getElementById('appointmentsTrendChart');
        if (trendCtx) {
            var months = trendCtx.getAttribute('data-months').split(',');
            var data = trendCtx.getAttribute('data-appointments').split(',').map(Number);
            new Chart(trendCtx, {
                type: 'line',
                data: {
                    labels: months,
                    datasets: [{
                        label: 'Appointments',
                        data: data,
                        borderColor: '#007bff',
                        backgroundColor: 'rgba(0,123,255,0.1)',
                        tension: 0.3,
                        fill: true
                    }]
                },
                options: { responsive: true, maintainAspectRatio: false }
            });
        }
        // Appointments Status Chart
        var statusCtx = document.getElementById('appointmentsStatusChart');
        if (statusCtx) {
            var upcoming = parseInt(statusCtx.getAttribute('data-upcoming'));
            var completed = parseInt(statusCtx.getAttribute('data-completed'));
            new Chart(statusCtx, {
                type: 'doughnut',
                data: {
                    labels: ['Upcoming', 'Completed'],
                    datasets: [{
                        data: [upcoming, completed],
                        backgroundColor: ['#007bff', '#6c757d']
                    }]
                },
                options: { responsive: true, maintainAspectRatio: false }
            });
        }
    }
});
</script>