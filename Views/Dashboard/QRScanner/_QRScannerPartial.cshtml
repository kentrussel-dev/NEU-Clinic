@{
    var baseUrl = $"{Context.Request.Scheme}://{Context.Request.Host}";
}

<link rel="stylesheet" href="~/css/site.css" asp-append-version="true" />
<link rel="stylesheet" href="~/css/profile.css" asp-append-version="true" />
<link rel="stylesheet" href="~/css/addfile.css" asp-append-version="true" />


<div class="container">
    <div class="row justify-content-center">
        <div class="col-md-6">
            <!-- QR Scanner Card -->
            <div class="card profile-card">
                <div class="card-header bg-primary text-white text-center">
                    <h4 class="m-0">QR Code Scanner</h4>
                </div>
                <div class="card-body text-center">
                    <!-- Camera Scanning -->
                    <div id="confirmationStep" class="d-flex flex-column align-items-center text-center">
                        <p>Click the button below to open your camera and scan a QR code.</p>
                        <img src="~/assets/images/QR_ICON.png" alt="QR Code" class="img-fluid"
                            style="max-width: 200px;">
                        <button id="openCameraBtn" class="btn btn-primary mt-3" data-bs-toggle="modal"
                            data-bs-target="#cameraModal">
                            Open Camera
                        </button>
                    </div>

                    <!-- File Upload & Drag-Drop -->
                    <div class="mt-4">
                        <p class="mb-2">Or upload a QR code image:</p>
                        <input type="file" id="qrFileInput" accept="image/*" class="form-control mb-3">
                        <div id="dropZone" class="drop-zone">
                            <p>Drag and drop a QR code image here</p>
                        </div>
                    </div>
                </div>
                <div class="card-footer text-center">
                    <small class="text-muted">Powered by jsQR</small>
                </div>
            </div>
        </div>
    </div>
</div>

<!-- Camera Modal -->
<div class="modal fade" id="cameraModal" tabindex="-1" aria-labelledby="cameraModalLabel" aria-hidden="true">
    <div class="modal-dialog modal-dialog-centered">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title" id="cameraModalLabel">Scan QR Code</h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <div class="modal-body text-center">
                <div class="video-container">
                    <video id="qr-video" width="100%" height="auto" autoplay muted></video>
                </div>
                <div id="scanResult" class="mt-4">
                    <p class="text-warning">No QR code detected.</p>
                </div>
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Close</button>
            </div>
        </div>
    </div>
</div>

<!-- Include Required JavaScript -->
<script src="~/lib/jquery/dist/jquery.min.js"></script>
<script src="https://cdn.jsdelivr.net/npm/jsqr@1.4.0/dist/jsQR.min.js"></script>

<!-- Pass baseUrl to JavaScript -->
<script>
    const baseUrl = "@baseUrl"; // Pass the baseUrl from Razor to JavaScript
    console.log("[DEBUG] Base URL:", baseUrl);
</script>

<!-- Main Script -->
<script>
    console.log("[DEBUG] Script loaded.");

    const video = document.getElementById('qr-video');
    const scanResult = document.getElementById('scanResult');
    const openCameraBtn = document.getElementById('openCameraBtn');
    const qrFileInput = document.getElementById("qrFileInput");
    const dropZone = document.getElementById("dropZone");
    let stream = null;
    let isScanning = false;

    // Function to construct the full URL from a relative path
    function constructFullUrl(relativePath) {
        return `${baseUrl}/${relativePath}`; // Use the baseUrl from Razor
    }

    // Handle "Open Camera" button click
    openCameraBtn.addEventListener('click', function () {
        console.log("[DEBUG] Open Camera button clicked.");

        if (navigator.mediaDevices && navigator.mediaDevices.getUserMedia) {
            navigator.mediaDevices.getUserMedia({ video: { facingMode: "environment" } })
                .then(function (cameraStream) {
                    stream = cameraStream;
                    video.srcObject = stream;
                    video.play();
                    isScanning = true;
                    startScanning();
                })
                .catch(function (error) {
                    console.error("[DEBUG] Error accessing camera:", error);
                    scanResult.innerHTML = `<p class="text-danger">Error accessing camera: ${error.message}</p>`;
                });
        } else {
            scanResult.innerHTML = `<p class="text-danger">Your browser does not support camera access.</p>`;
        }
    });

    // Function to start scanning
    function startScanning() {
        const canvas = document.createElement('canvas');
        const context = canvas.getContext('2d');

        function scanFrame() {
            if (!isScanning) return;
            if (video.readyState === video.HAVE_ENOUGH_DATA) {
                canvas.width = video.videoWidth;
                canvas.height = video.videoHeight;
                context.drawImage(video, 0, 0, canvas.width, canvas.height);

                const imageData = context.getImageData(0, 0, canvas.width, canvas.height);
                const code = jsQR(imageData.data, imageData.width, imageData.height, { inversionAttempts: "dontInvert" });

                if (code) {
                    let fullUrl = code.data;

                    // If the decoded text is a relative path, construct the full URL
                    if (!isValidUrl(code.data)) {
                        fullUrl = constructFullUrl(code.data);
                    }

                    console.log("[DEBUG] Full URL:", fullUrl);
                    scanResult.innerHTML = `<p class="text-success"><strong>Decoded Text:</strong> ${fullUrl}</p>`;

                    if (isValidUrl(fullUrl)) {
                        window.open(fullUrl, '_blank'); // Open the full URL in a new tab
                    }

                    stopCamera();
                }
            }
            requestAnimationFrame(scanFrame);
        }
        scanFrame();
    }

    // Stop camera
    function stopCamera() {
        isScanning = false;
        if (stream) {
            stream.getTracks().forEach(track => track.stop());
            video.srcObject = null;
        }
    }

    // Stop camera when modal is closed
    document.getElementById('cameraModal').addEventListener('hidden.bs.modal', stopCamera);

    // Read QR Code from an image file
    function readQRCodeFromFile(file) {
        const reader = new FileReader();
        reader.onload = function (event) {
            const img = new Image();
            img.src = event.target.result;
            img.onload = function () {
                const canvas = document.createElement("canvas");
                const context = canvas.getContext("2d");
                canvas.width = img.width;
                canvas.height = img.height;
                context.drawImage(img, 0, 0, canvas.width, canvas.height);

                const imageData = context.getImageData(0, 0, canvas.width, canvas.height);
                const code = jsQR(imageData.data, imageData.width, imageData.height, { inversionAttempts: "dontInvert" });

                if (code) {
                    let fullUrl = code.data;

                    // If the decoded text is a relative path, construct the full URL
                    if (!isValidUrl(code.data)) {
                        fullUrl = constructFullUrl(code.data);
                    }

                    console.log("[DEBUG] Full URL:", fullUrl);
                    scanResult.innerHTML = `<p class="text-success"><strong>Decoded Text:</strong> ${fullUrl}</p>`;

                    if (isValidUrl(fullUrl)) {
                        window.open(fullUrl, '_blank'); // Open the full URL in a new tab
                    }
                } else {
                    scanResult.innerHTML = `<p class="text-warning">No QR code detected in image.</p>`;
                }
            };
        };
        reader.readAsDataURL(file);
    }

    // Handle file input
    qrFileInput.addEventListener("change", function () {
        if (qrFileInput.files.length > 0) {
            readQRCodeFromFile(qrFileInput.files[0]);
        }
    });

    // Drag and Drop
    dropZone.addEventListener("dragover", e => e.preventDefault());
    dropZone.addEventListener("drop", e => {
        e.preventDefault();
        if (e.dataTransfer.files.length > 0) readQRCodeFromFile(e.dataTransfer.files[0]);
    });

    // Function to check if a string is a valid URL
    function isValidUrl(string) {
        try {
            new URL(string);
            return true;
        } catch (_) {
            return false;
        }
    }
</script>
