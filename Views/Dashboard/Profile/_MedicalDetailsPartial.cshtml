@using System.Text.Json
@using Microsoft.EntityFrameworkCore
@using Microsoft.AspNetCore.Identity
@using WebApp.ViewModels
@using WebApp.Data
@inject UserManager<Users> userManager
@inject SignInManager<Users> signInManager
@inject AppDbContext _context

@{
    var user = await userManager.GetUserAsync(User);
    var medicalDetails = user != null
    ? await _context.HealthDetails.FirstOrDefaultAsync(m => m.UserId == user.Id)
    : null;

    // Fetch all submissions for the user, ordered by submission date (latest first)
    var allSubmissions = user != null
    ? await _context.SubmittedHealthDetails
    .Where(s => s.UserId == user.Id)
    .OrderByDescending(s => s.SubmissionDate)
    .ToListAsync()
    : new List<SubmittedHealthDetails>();

    // Check if the user has submitted any health details
    var hasSubmittedDetails = allSubmissions.Any();

    // Health details
    var bloodType = medicalDetails?.BloodType ?? "N/A";
    var allergies = medicalDetails?.Allergies ?? "None";
    var medicalNotes = medicalDetails?.MedicalNotes ?? "No medical notes available.";
    var emergencyContactName = medicalDetails?.EmergencyContactName ?? "N/A";
    var emergencyContactRelationship = medicalDetails?.EmergencyContactRelationship ?? "N/A";
    var emergencyContactPhone = medicalDetails?.EmergencyContactPhone ?? "N/A";
    var chronicConditions = medicalDetails?.ChronicConditions ?? "No chronic conditions reported.";
    var medications = medicalDetails?.Medications ?? "No medications reported.";
    var immunizationHistory = medicalDetails?.ImmunizationHistory ?? "No immunization records available.";
    var recentCheckups = medicalDetails?.RecentCheckups ?? "No recent checkups reported.";
    var activityRestrictions = medicalDetails?.ActivityRestrictions ?? "No restrictions reported.";
    var dietaryRestrictions = medicalDetails?.DietaryRestrictions ?? "No dietary restrictions reported.";
    var mentalHealthNotes = medicalDetails?.MentalHealthNotes ?? "No mental health notes available.";

    // Aggregate statuses and submitted values across all submissions
    var bloodTypeStatus = allSubmissions
    .Where(s => s.BloodType != null)
    .Select(s => new { Status = s.BloodTypeStatus, Value = s.BloodType })
    .FirstOrDefault(); // Get the status and value from the latest submission with a non-null BloodType

    var allergiesStatus = allSubmissions
    .Where(s => s.Allergies != null)
    .Select(s => new { Status = s.AllergiesStatus, Value = s.Allergies })
    .FirstOrDefault(); // Get the status and value from the latest submission with a non-null Allergies

    var emergencyContactNameStatus = allSubmissions
    .Where(s => s.EmergencyContactName != null)
    .Select(s => new { Status = s.EmergencyContactNameStatus, Value = s.EmergencyContactName })
    .FirstOrDefault(); // Get the status and value from the latest submission with a non-null EmergencyContactName

    var emergencyContactRelationshipStatus = allSubmissions
    .Where(s => s.EmergencyContactRelationship != null)
    .Select(s => new { Status = s.EmergencyContactRelationshipStatus, Value = s.EmergencyContactRelationship })
    .FirstOrDefault(); // Get the status and value from the latest submission with a non-null EmergencyContactRelationship

    var emergencyContactPhoneStatus = allSubmissions
    .Where(s => s.EmergencyContactPhone != null)
    .Select(s => new { Status = s.EmergencyContactPhoneStatus, Value = s.EmergencyContactPhone })
    .FirstOrDefault(); // Get the status and value from the latest submission with a non-null EmergencyContactPhone

    var xRayFileStatus = allSubmissions
    .Where(s => s.XRayFileUrl != null)
    .Select(s => new { Status = s.XRayFileStatus, Value = s.XRayFileUrl })
    .FirstOrDefault(); // Get the status and value from the latest submission with a non-null XRayFileUrl

    var medicalCertificateStatus = allSubmissions
    .Where(s => s.MedicalCertificateUrl != null)
    .Select(s => new { Status = s.MedicalCertificateStatus, Value = s.MedicalCertificateUrl })
    .FirstOrDefault(); // Get the status and value from the latest submission with a non-null MedicalCertificateUrl

    var vaccinationRecordStatus = allSubmissions
    .Where(s => s.VaccinationRecordUrl != null)
    .Select(s => new { Status = s.VaccinationRecordStatus, Value = s.VaccinationRecordUrl })
    .FirstOrDefault(); // Get the status and value from the latest submission with a non-null VaccinationRecordUrl

    var otherDocumentsStatus = allSubmissions
    .Where(s => s.OtherDocumentsUrl != null)
    .Select(s => new { Status = s.OtherDocumentsStatus, Value = s.OtherDocumentsUrl })
    .FirstOrDefault(); // Get the status and value from the latest submission with a non-null OtherDocumentsUrl

    var healthAlerts = new List<string>();
    if (!string.IsNullOrEmpty(medicalDetails?.HealthAlerts))
    {
        healthAlerts = JsonSerializer.Deserialize<List<string>>(medicalDetails.HealthAlerts);
    }

    var roles = user != null ? await userManager.GetRolesAsync(user) : new List<string>();
    var role = roles.Any() ? string.Join(", ", roles) : "No Role Assigned";

    // Initialize role flags
    var isSuperAdmin = roles.Contains("SuperAdmin");
    var isAdmin = roles.Contains("Admin");
    var isMedicalStaff = roles.Contains("MedicalStaff");
    var isStudent = roles.Contains("Student");

    // Set userRole based on the highest priority role
    var userRole = "Student";
    if (isSuperAdmin)
    {
        userRole = "SuperAdmin";
    }
    else if (isAdmin)
    {
        userRole = "Admin";
    }
    else if (isMedicalStaff)
    {
        userRole = "MedicalStaff";
    }
    else if (isStudent)
    {
        userRole = "Student";
    }
}

@functions {
    public string GetStatusBadgeColor(string status)
    {
        switch (status.ToLower())
        {
            case "approved":
                return "success";
            case "rejected":
                return "danger";
            case "pending":
                return "warning";
            default:
                return "secondary";
        }
    }
}

<!-- Alert for Unsubmitted Details -->
@if (!hasSubmittedDetails)
{
    <div class="alert alert-danger d-flex align-items-center" role="alert">
        <i class="fas fa-exclamation-circle me-2"></i>
        <div>
            You have not submitted your health details yet. Please submit your health details as soon as possible.
        </div>
    </div>
}

<!-- Health Information -->
<h5 class="mb-3">Health Information</h5>
<div class="row mb-3">
    <div class="col-md-6">
        <label for="bloodType" class="form-label">Blood Type</label>
        <input type="text" class="form-control" id="bloodType" placeholder="@bloodType" readonly>
        @if (bloodTypeStatus != null && bloodTypeStatus.Status != "Approved")
        {
            <small class="text-muted">
                Status: <span class="badge bg-@GetStatusBadgeColor(bloodTypeStatus.Status)">@bloodTypeStatus.Status</span>
                <br />
                Submitted Value: @bloodTypeStatus.Value
            </small>
        }
    </div>
    <div class="col-md-6">
        <label for="allergies" class="form-label">Allergies</label>
        <input type="text" class="form-control" id="allergies" placeholder="@allergies" readonly>
        @if (allergiesStatus != null && allergiesStatus.Status != "Approved")
        {
            <small class="text-muted">
                Status: <span class="badge bg-@GetStatusBadgeColor(allergiesStatus.Status)">@allergiesStatus.Status</span>
                <br />
                Submitted Value: @allergiesStatus.Value
            </small>
        }
    </div>
</div>
<div class="row mb-3">
    <div class="col-md-12">
        <label for="medicalNotes" class="form-label">Medical Notes</label>
        <textarea class="form-control" id="medicalNotes" rows="3" placeholder="@medicalNotes" readonly></textarea>
    </div>
</div>

<!-- Emergency Contact Information -->
<h5 class="mb-3 mt-4">Emergency Contact</h5>
<div class="row mb-3">
    <div class="col-md-6">
        <label for="emergencyContactName" class="form-label">Name</label>
        <input type="text" class="form-control" id="emergencyContactName" placeholder="@emergencyContactName" readonly>
        @if (emergencyContactNameStatus != null && emergencyContactNameStatus.Status != "Approved")
        {
            <small class="text-muted">
                Status: <span
                    class="badge bg-@GetStatusBadgeColor(emergencyContactNameStatus.Status)">@emergencyContactNameStatus.Status</span>
                <br />
                Submitted Value: @emergencyContactNameStatus.Value
            </small>
        }
    </div>
    <div class="col-md-6">
        <label for="emergencyContactRelationship" class="form-label">Relationship</label>
        <input type="text" class="form-control" id="emergencyContactRelationship"
            placeholder="@emergencyContactRelationship" readonly>
        @if (emergencyContactRelationshipStatus != null && emergencyContactRelationshipStatus.Status != "Approved")
        {
            <small class="text-muted">
                Status: <span
                    class="badge bg-@GetStatusBadgeColor(emergencyContactRelationshipStatus.Status)">@emergencyContactRelationshipStatus.Status</span>
                <br />
                Submitted Value: @emergencyContactRelationshipStatus.Value
            </small>
        }
    </div>
</div>
<div class="row mb-3">
    <div class="col-md-6">
        <label for="emergencyContactPhone" class="form-label">Phone Number</label>
        <input type="text" class="form-control" id="emergencyContactPhone" placeholder="@emergencyContactPhone"
            readonly>
        @if (emergencyContactPhoneStatus != null && emergencyContactPhoneStatus.Status != "Approved")
        {
            <small class="text-muted">
                Status: <span
                    class="badge bg-@GetStatusBadgeColor(emergencyContactPhoneStatus.Status)">@emergencyContactPhoneStatus.Status</span>
                <br />
                Submitted Value: @emergencyContactPhoneStatus.Value
            </small>
        }
    </div>
</div>

<!-- Health Documents -->
<h5 class="mb-3 mt-4">Health Documents</h5>
<div class="row mb-3">
    <div class="col-md-6">
        <label class="form-label">X-Ray Results</label>
        @if (!string.IsNullOrEmpty(medicalDetails.XRayFileUrl))
        {
            <a href="@medicalDetails.XRayFileUrl" class="form-control" target="_blank">View X-Ray</a>
        }
        else
        {
            <p class="form-control">No X-Ray file uploaded.</p>
        }
        @if (xRayFileStatus != null && xRayFileStatus.Status != "Approved")
        {
            <small class="text-muted">
                Status: <span class="badge bg-@GetStatusBadgeColor(xRayFileStatus.Status)">@xRayFileStatus.Status</span>
                <br />
                Submitted File: <a href="@xRayFileStatus.Value" target="_blank">View File</a>
            </small>
        }
    </div>
    <div class="col-md-6">
        <label class="form-label">Medical Certificate</label>
        @if (!string.IsNullOrEmpty(medicalDetails.MedicalCertificateUrl))
        {
            <a href="@medicalDetails.MedicalCertificateUrl" class="form-control" target="_blank">View Certificate</a>
        }
        else
        {
            <p class="form-control">No medical certificate uploaded.</p>
        }
        @if (medicalCertificateStatus != null && medicalCertificateStatus.Status != "Approved")
        {
            <small class="text-muted">
                Status: <span
                    class="badge bg-@GetStatusBadgeColor(medicalCertificateStatus.Status)">@medicalCertificateStatus.Status</span>
                <br />
                Submitted File: <a href="@medicalCertificateStatus.Value" target="_blank">View File</a>
            </small>
        }
    </div>
</div>
<div class="row mb-3">
    <div class="col-md-6">
        <label class="form-label">Vaccination Record</label>
        @if (!string.IsNullOrEmpty(medicalDetails.VaccinationRecordUrl))
        {
            <a href="@medicalDetails.VaccinationRecordUrl" class="form-control" target="_blank">View Record</a>
        }
        else
        {
            <p class="form-control">No vaccination record uploaded.</p>
        }
        @if (vaccinationRecordStatus != null && vaccinationRecordStatus.Status != "Approved")
        {
            <small class="text-muted">
                Status: <span
                    class="badge bg-@GetStatusBadgeColor(vaccinationRecordStatus.Status)">@vaccinationRecordStatus.Status</span>
                <br />
                Submitted File: <a href="@vaccinationRecordStatus.Value" target="_blank">View File</a>
            </small>
        }
    </div>
    <div class="col-md-6">
        <label class="form-label">Other Documents</label>
        @if (!string.IsNullOrEmpty(medicalDetails.OtherDocumentsUrl))
        {
            <a href="@medicalDetails.OtherDocumentsUrl" class="form-control" target="_blank">Download Files</a>
        }
        else
        {
            <p class="form-control">No other documents uploaded.</p>
        }
        @if (otherDocumentsStatus != null && otherDocumentsStatus.Status != "Approved")
        {
            <small class="text-muted">
                Status: <span
                    class="badge bg-@GetStatusBadgeColor(otherDocumentsStatus.Status)">@otherDocumentsStatus.Status</span>
                <br />
                Submitted File: <a href="@otherDocumentsStatus.Value" target="_blank">View File</a>
            </small>
        }
    </div>
</div>