@model List<WebApp.Models.Users>
@using Microsoft.AspNetCore.Identity
@using Microsoft.EntityFrameworkCore;
@using WebApp.Models
@inject UserManager<Users> UserManager
@inject SignInManager<Users> SignInManager


<link rel="stylesheet" href="~/css/superadmin.css" asp-append-version="true" />

@{
    // Fetch all users with their PersonalDetails
    var allUsers = await UserManager.Users
    .Include(u => u.PersonalDetails)
    .ToListAsync();

    ViewData["Title"] = "User Management";
    var userRoles = ViewBag.UserRoles as Dictionary<string, List<string>>;
    var roles = ViewBag.Roles as List<IdentityRole>;
    Layout = "~/Views/Shared/Layouts/_DashboardLayout.cshtml";

    // Filter out the SuperAdmin role
    var filteredRoles = roles.Where(r => r.Name != "SuperAdmin").ToList();
    var baseUrl = $"{Context.Request.Scheme}://{Context.Request.Host}";
}

<div class="container-fluid">
    <h2 class="text-center mb-4 p-4 border rounded shadow-sm bg-light">
        <i class="fa-solid fa-users-gear"></i> User Management
    </h2>

    <!-- Display TempData messages -->
    @if (TempData["SuccessMessage"] != null)
    {
        <div class="alert alert-success">@TempData["SuccessMessage"]</div>
    }
    @if (TempData["ErrorMessage"] != null)
    {
        <div class="alert alert-danger">@TempData["ErrorMessage"]</div>
    }

    <div class="d-flex justify-content-between align-items-center mb-3">
        <input type="text" id="searchInput" class="form-control w-25" placeholder="Search by Name or Email...">

        <!-- Sorting Dropdown -->
        <div class="dropdown">
            <button class="btn btn-secondary dropdown-toggle" type="button" id="sortDropdown" data-bs-toggle="dropdown"
                aria-expanded="false">
                <i class="fas fa-sort"></i> Sort By
            </button>
            <ul class="dropdown-menu" aria-labelledby="sortDropdown">
                <li><a class="dropdown-item" href="#" onclick="sortTable(1, true)"><i
                            class="fas fa-sort-alpha-down"></i> Name (A-Z)</a></li>
                <li><a class="dropdown-item" href="#" onclick="sortTable(1, false)"><i class="fas fa-sort-alpha-up"></i>
                        Name (Z-A)</a></li>
                <li><a class="dropdown-item" href="#" onclick="sortTable(2, true)"><i
                            class="fas fa-sort-numeric-down"></i> Email (A-Z)</a></li>
                <li><a class="dropdown-item" href="#" onclick="sortTable(2, false)"><i
                            class="fas fa-sort-numeric-up"></i> Email (Z-A)</a></li>
            </ul>
        </div>
    </div>

    <div class="table-responsive">
        <table class="table table-hover user-table text-center" id="userTable">
            <thead class="table-dark">
                <tr>
                    <th>Profile</th>
                    <th>Full Name</th>
                    <th>Email</th>
                    <th>Student ID</th>
                    <th>Role</th>
                    <th>Action</th>
                </tr>
            </thead>
            <tbody>
                @foreach (var user in Model)
                {
                    var personalDetails = user?.PersonalDetails;
                    if (!userRoles[user.Id].Contains("SuperAdmin"))
                    {
                        <tr id="user-@user.Id">
                            <td class="align-middle">
                                <a href="@baseUrl/profile/@user.Id" target="_blank">
                                    <img src="@user.ProfilePictureUrl" alt="Profile" class="profile-img rounded-circle">
                                </a>
                            </td>
                            <td class="align-middle">@user.FullName</td>
                            <td class="align-middle">@user.Email</td>
                            <td class="align-middle">@(personalDetails?.StudentId ?? "N/A")</td>
                            <td class="align-middle">
                                <form method="post" asp-action="UpdateUserRole" asp-controller="UsersManagement"
                                    id="updateForm-@user.Id">
                                    <input type="hidden" name="userId" value="@user.Id" />
                                    <select name="newRole" class="form-select role-select" disabled>
                                        @foreach (var role in filteredRoles)
                                        {
                                            <option value="@role.Name"
                                                selected="@(userRoles[user.Id]?.Contains(role.Name) == true ? "selected" : null)">
                                                @role.Name
                                            </option>
                                        }
                                    </select>
                                </form>
                            </td>
                            <td class="align-middle">
                                <!-- Profile Button -->
                                <a href="@baseUrl/profile/@user.Id" class="btn btn-primary btn-sm btn-modern" target="_blank">
                                    <i class="fas fa-user"></i> Profile
                                </a>
                                <!-- Edit Button -->
                                <button class="btn btn-success btn-sm edit-btn btn-modern" onclick="toggleEdit('@user.Id')">
                                    <i class="fas fa-edit"></i> Edit
                                </button>
                                <!-- Update Button -->
                                <button type="button" class="btn btn-warning btn-sm update-btn btn-modern"
                                    style="display: none;" onclick="confirmUpdate('@user.Id')">
                                    <i class="fas fa-save"></i> Update
                                </button>
                                <!-- Delete Button -->
                                <button type="button" class="btn btn-danger btn-sm btn-modern"
                                    onclick="confirmDelete('@user.Id')">
                                    <i class="fas fa-trash"></i> Delete
                                </button>
                            </td>
                        </tr>
                    }
                }
            </tbody>
        </table>
    </div>
</div>

<!-- Bootstrap Confirmation Modal -->
<div class="modal fade" id="confirmationModal" tabindex="-1" aria-labelledby="confirmationModalLabel"
    aria-hidden="true">
    <div class="modal-dialog">
        <div class="modal-content">
            <div class="modal-header bg-primary text-white">
                <h5 class="modal-title" id="confirmationModalLabel">Confirmation</h5>
                <button type="button" class="btn-close btn-close-white" data-bs-dismiss="modal"
                    aria-label="Close"></button>
            </div>
            <div class="modal-body">
                Are you sure you want to perform this action?
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-secondary btn-modern" data-bs-dismiss="modal">Cancel</button>
                <button type="button" class="btn btn-primary btn-modern" id="confirmAction">Confirm</button>
            </div>
        </div>
    </div>
</div>

@section Scripts {
    <script>
        // Function to toggle edit mode
        function toggleEdit(userId) {
            const row = document.getElementById(`user-${userId}`);
            const roleSelect = row.querySelector('.role-select');
            const editBtn = row.querySelector('.edit-btn');
            const updateBtn = row.querySelector('.update-btn');

            roleSelect.disabled = !roleSelect.disabled;
            editBtn.style.display = roleSelect.disabled ? 'inline-block' : 'none';
            updateBtn.style.display = roleSelect.disabled ? 'none' : 'inline-block';
        }

        // Function to handle search
        document.getElementById('searchInput').addEventListener('keyup', function () {
            let search = this.value.toLowerCase();
            let rows = document.querySelectorAll('#userTable tbody tr');
            rows.forEach(row => {
                let name = row.cells[1].textContent.toLowerCase(); // Search by name (2nd column)
                let email = row.cells[2].textContent.toLowerCase(); // Search by email (3rd column)
                let student_id = row.cells[3].textContent.toLowerCase(); // Search by email (4th column)
                row.style.display = (name.includes(search) || email.includes(search) || student_id.includes(search)) ? '' : 'none';
            });
        });

        // Function to confirm delete action
        function confirmDelete(userId) {
            const modal = new bootstrap.Modal(document.getElementById('confirmationModal'));
            document.getElementById('confirmAction').onclick = function () {
                fetch(`/UsersManagement/DeleteUser?userId=${userId}`, {
                    method: 'POST',
                }).then(response => {
                    if (response.ok) {
                        window.location.reload(); // Reload the page after deletion
                    } else {
                        alert('Failed to delete user');
                    }
                });
                modal.hide();
            };
            modal.show();
        }

        // Function to confirm update action
        function confirmUpdate(userId) {
            const modal = new bootstrap.Modal(document.getElementById('confirmationModal'));
            document.getElementById('confirmAction').onclick = function () {
                document.getElementById(`updateForm-${userId}`).submit(); // Submit the update form
                modal.hide();
            };
            modal.show();
        }

        // Sorting functionality
        function sortTable(columnIndex, ascending) {
            let rows = Array.from(document.querySelectorAll('#userTable tbody tr'));
            rows.sort((a, b) => {
                let aValue = a.cells[columnIndex].textContent.toLowerCase();
                let bValue = b.cells[columnIndex].textContent.toLowerCase();
                return ascending ? aValue.localeCompare(bValue) : bValue.localeCompare(aValue);
            });
            let tbody = document.querySelector('#userTable tbody');
            tbody.innerHTML = '';
            rows.forEach(row => tbody.appendChild(row));
        }
    </script>
}