@model WebApp.Models.ViewModels.StudentHealthStatusViewModel
@{
    ViewData["Title"] = "Student Health Requirements Status";
    Layout = "~/Views/Shared/Layouts/_DashboardLayout.cshtml";
}

<link rel="stylesheet" href="~/css/superadmin.css" asp-append-version="true" />
<script src="https://cdnjs.cloudflare.com/ajax/libs/Chart.js/3.7.1/chart.min.js"></script>

<div class="container mt-4 mb-4">
    <div class="position-relative mb-4">
        <div class="text-center mb-4">
            <h2 class="d-inline-block p-4 border rounded shadow-sm bg-light">
                <i class="fas fa-heartbeat me-2"></i>Student Health Requirements Status
            </h2>
        </div>
        <a href="@Url.Action("Index", "Analytics")" class="btn btn-primary btn-modern position-absolute top-0 end-0">
            <i class="fas fa-arrow-left"></i> Back to Dashboard
        </a>
    </div>

    <!-- Filters and Search -->
    <div class="card shadow mb-4">
        <div class="card-header py-3 d-flex flex-row align-items-center justify-content-between">
            <h6 class="m-0 font-weight-bold text-primary">Filter Options</h6>
        </div>
        <div class="card-body">
            <div class="row align-items-center">
                <div class="col-md-3 mb-3 mb-md-0">
                    <div class="input-group">
                        <span class="input-group-text bg-primary text-white border-0">
                            <i class="fas fa-filter"></i>
                        </span>
                        <select id="requirementFilter" class="form-select">
                            <option value="">All Requirements</option>
                            <option value="BloodType" selected="@(Model.FilterRequirement == "BloodType")">Blood Type</option>
                            <option value="EmergencyContact" selected="@(Model.FilterRequirement == "EmergencyContact")">Emergency Contact</option>
                            <option value="XRay" selected="@(Model.FilterRequirement == "XRay")">X-Ray</option>
                            <option value="MedicalCertificate" selected="@(Model.FilterRequirement == "MedicalCertificate")">Medical Certificate</option>
                            <option value="VaccinationRecord" selected="@(Model.FilterRequirement == "VaccinationRecord")">Vaccination Record</option>
                            <option value="Critical" selected="@(Model.FilterRequirement == "Critical")">Incomplete Records</option>
                        </select>
                    </div>
                </div>
                <div class="col-md-3 mb-3 mb-md-0">
                    <div class="input-group">
                        <span class="input-group-text bg-primary text-white border-0">
                            <i class="fas fa-university"></i>
                        </span>
                        <select id="departmentFilter" class="form-select">
                            <option value="">All Departments</option>
                            <option value="Not Specified">Not Specified</option>
                            <option value="College of Accountancy">College of Accountancy</option>
                            <option value="College of Agriculture">College of Agriculture</option>
                            <option value="College of Arts and Science">College of Arts and Science</option>
                            <option value="College of Business Administration">College of Business Administration</option>
                            <option value="College of Communication">College of Communication</option>
                            <option value="College of Informatics and Computing Studies">College of Informatics and Computing Studies</option>
                            <option value="College of Criminology">College of Criminology</option>
                            <option value="College of Education">College of Education</option>
                            <option value="College of Engineering and Architecture">College of Engineering and Architecture</option>
                            <option value="College of Medical Technology">College of Medical Technology</option>
                            <option value="College of Midwifery">College of Midwifery</option>
                            <option value="College of Music">College of Music</option>
                            <option value="College of Nursing">College of Nursing</option>
                            <option value="College of Physical Therapy">College of Physical Therapy</option>
                            <option value="College of Respiratory Therapy">College of Respiratory Therapy</option>
                            <option value="School of International Relations">School of International Relations</option>
                        </select>
                    </div>
                </div>
                <div class="col-md-4 mb-3 mb-md-0">
                    <div class="input-group">
                        <span class="input-group-text bg-primary text-white border-0">
                            <i class="fas fa-search"></i>
                        </span>
                        <input type="text" id="searchInput" class="form-control" placeholder="Search students...">
                    </div>
                </div>
                <div class="col-md-2">
                    <button id="resetFilters" class="btn btn-secondary btn-modern w-100">
                        <i class="fas fa-undo"></i> Reset
                    </button>
                </div>
            </div>
        </div>
    </div>

    <!-- Statistics Cards -->
    <div class="row mb-4">
        <div class="col-xl-4 col-md-6 mb-4">
            <div class="card border-left-primary shadow h-100 py-2">
                <div class="card-body">
                    <div class="row no-gutters align-items-center">
                        <div class="col mr-2">
                            <div class="text-xs font-weight-bold text-primary text-uppercase mb-1">
                                Total Students</div>
                            <div class="h5 mb-0 font-weight-bold text-gray-800" id="totalStudentsCount">@Model.Students.Count</div>
                        </div>
                        <div class="col-auto">
                            <i class="fas fa-users fa-2x text-gray-300"></i>
                        </div>
                    </div>
                </div>
            </div>
        </div>

        <div class="col-xl-4 col-md-6 mb-4">
            <div class="card border-left-success shadow h-100 py-2">
                <div class="card-body">
                    <div class="row no-gutters align-items-center">
                        <div class="col mr-2">
                            <div class="text-xs font-weight-bold text-success text-uppercase mb-1">
                                Complete Records (100%)</div>
                            <div class="h5 mb-0 font-weight-bold text-gray-800" id="completeCount">@Model.Students.Count(s => s.CompletionPercentage == 100)</div>
                        </div>
                        <div class="col-auto">
                            <i class="fas fa-check-circle fa-2x text-gray-300"></i>
                        </div>
                    </div>
                </div>
            </div>
        </div>

        <div class="col-xl-4 col-md-6 mb-4">
            <div class="card border-left-danger shadow h-100 py-2">
                <div class="card-body">
                    <div class="row no-gutters align-items-center">
                        <div class="col mr-2">
                            <div class="text-xs font-weight-bold text-danger text-uppercase mb-1">
                                Incomplete Records (<100%)</div>
                            <div class="h5 mb-0 font-weight-bold text-gray-800" id="incompleteCount">@Model.Students.Count(s => s.CompletionPercentage < 100)</div>
                        </div>
                        <div class="col-auto">
                            <i class="fas fa-exclamation-circle fa-2x text-gray-300"></i>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>

    <!-- Students Table -->
    <div class="card shadow mb-4 user-table">
        <div class="card-header py-3 d-flex flex-row align-items-center justify-content-between">
            <h6 class="m-0 font-weight-bold text-primary">Student Health Requirements Status</h6>
            <div>
                <button class="btn btn-success btn-modern" id="exportToExcel">
                    <i class="fas fa-file-excel"></i> Export to Excel
                </button>
            </div>
        </div>
        <div class="card-body">
            <div class="table-responsive">
                <table class="table table-bordered" id="studentsTable" width="100%" cellspacing="0">
                    <thead>
                        <tr>
                            <th>Student</th>
                            <th>Department</th>
                            <th>Blood Type</th>
                            <th>Emergency Contact</th>
                            <th>X-Ray</th>
                            <th>Medical Certificate</th>
                            <th>Vaccination Record</th>
                            <th>Health Alerts</th>
                            <th>Completion</th>
                        </tr>
                    </thead>
                    <tbody>
                        @foreach (var student in Model.Students)
                        {
                            <tr data-department="@student.Department" data-completion="@student.CompletionPercentage" 
                                data-blood-type="@(!string.IsNullOrEmpty(student.BloodType))"
                                data-emergency-contact="@student.HasEmergencyContact"
                                data-xray="@student.HasXRay"
                                data-medical-certificate="@student.HasMedicalCertificate"
                                data-vaccination-record="@student.HasVaccinationRecord"
                                data-student-name="@student.FullName.ToLower()"
                                data-email="@student.Email.ToLower()">
                                <td>
                                    <div class="d-flex align-items-center">
                                        <img src="@student.ProfilePictureUrl" class="profile-img rounded-circle me-2" alt="Profile">
                                        <div>
                                            <div class="fw-bold">@student.FullName</div>
                                            <div class="small text-muted">@student.Email</div>
                                        </div>
                                    </div>
                                </td>
                                <td>@(string.IsNullOrEmpty(student.Department) ? "Not Specified" : student.Department)</td>
                                <td>
                                    @if (!string.IsNullOrEmpty(student.BloodType))
                                    {
                                        <span class="badge bg-success">@student.BloodType</span>
                                    }
                                    else
                                    {
                                        <span class="badge bg-danger">Missing</span>
                                    }
                                </td>
                                <td>
                                    @if (student.HasEmergencyContact)
                                    {
                                        <i class="fas fa-check-circle text-success"></i>
                                    }
                                    else
                                    {
                                        <i class="fas fa-times-circle text-danger"></i>
                                    }
                                </td>
                                <td>
                                    @if (student.HasXRay)
                                    {
                                        <i class="fas fa-check-circle text-success"></i>
                                    }
                                    else
                                    {
                                        <i class="fas fa-times-circle text-danger"></i>
                                    }
                                </td>
                                <td>
                                    @if (student.HasMedicalCertificate)
                                    {
                                        <i class="fas fa-check-circle text-success"></i>
                                    }
                                    else
                                    {
                                        <i class="fas fa-times-circle text-danger"></i>
                                    }
                                </td>
                                <td>
                                    @if (student.HasVaccinationRecord)
                                    {
                                        <i class="fas fa-check-circle text-success"></i>
                                    }
                                    else
                                    {
                                        <i class="fas fa-times-circle text-danger"></i>
                                    }
                                </td>
                                <td>
                                    @if (student.HealthAlerts.Any())
                                    {
                                        <span class="badge bg-warning text-dark">@student.HealthAlerts.Count</span>
                                        <button class="btn btn-sm btn-outline-info" onclick="showHealthAlerts('@string.Join(", ", student.HealthAlerts)')">
                                            <i class="fas fa-eye"></i>
                                        </button>
                                    }
                                    else
                                    {
                                        <span class="badge bg-secondary">None</span>
                                    }
                                </td>
                                <td>
                                    <div class="progress" style="height: 20px;">
                                        @{
                                            var colorClass = student.CompletionPercentage == 100 ? "bg-success" : 
                                                            student.CompletionPercentage >= 70 ? "bg-info" :
                                                            student.CompletionPercentage >= 40 ? "bg-warning" : "bg-danger";
                                        }
                                        <div class="progress-bar @colorClass" role="progressbar" 
                                             style="width: @student.CompletionPercentage%;" 
                                             aria-valuenow="@student.CompletionPercentage" aria-valuemin="0" aria-valuemax="100">
                                            @student.CompletionPercentage%
                                        </div>
                                    </div>
                                </td>
                            </tr>
                        }
                    </tbody>
                </table>
            </div>
        </div>
    </div>
</div>

<!-- Health Alerts Modal -->
<div class="modal fade" id="healthAlertsModal" tabindex="-1" aria-labelledby="healthAlertsModalLabel" aria-hidden="true">
    <div class="modal-dialog">
        <div class="modal-content">
            <div class="modal-header bg-primary text-white">
                <h5 class="modal-title" id="healthAlertsModalLabel">Health Alerts</h5>
                <button type="button" class="btn-close btn-close-white" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <div class="modal-body">
                <ul id="healthAlertsList" class="list-group">
                </ul>
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Close</button>
            </div>
        </div>
    </div>
</div>

@section Scripts {
    <script src="https://cdnjs.cloudflare.com/ajax/libs/FileSaver.js/2.0.5/FileSaver.min.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/xlsx/0.16.9/xlsx.full.min.js"></script>

    <script>
        $(document).ready(function() {
            // Initialize tooltips
            var tooltipTriggerList = [].slice.call(document.querySelectorAll('[data-bs-toggle="tooltip"]'))
            var tooltipList = tooltipTriggerList.map(function (tooltipTriggerEl) {
                return new bootstrap.Tooltip(tooltipTriggerEl)
            });
            
            // Skip DataTable initialization to implement custom filtering
            // Instead, implement direct DOM manipulation for faster and more responsive filtering
            
            // Global variables to track current filter state
            var currentRequirement = '';
            var currentDepartment = '';
            var currentSearch = '';
            
            // Handle initial URL parameters if present
            var urlParams = new URLSearchParams(window.location.search);
            var deptParam = urlParams.get('department');
            var reqParam = urlParams.get('requirement');
            
            if (deptParam) {
                $('#departmentFilter').val(deptParam);
                currentDepartment = deptParam;
            }
            
            if (reqParam) {
                $('#requirementFilter').val(reqParam);
                currentRequirement = reqParam;
            }
            
            // Apply initial filtering
            applyFilters();
            
            // Function to apply all filters
            function applyFilters() {
                var allRows = $('#studentsTable tbody tr');
                
                // Reset visibility
                allRows.show();
                
                // Apply requirement filter
                if (currentRequirement) {
                    switch (currentRequirement) {
                        case 'BloodType':
                            allRows.filter(function() {
                                return $(this).data('blood-type') !== true;
                            }).hide();
                            break;
                        case 'EmergencyContact':
                            allRows.filter(function() {
                                return $(this).data('emergency-contact') !== false;
                            }).hide();
                            break;
                        case 'XRay':
                            allRows.filter(function() {
                                return $(this).data('xray') !== false;
                            }).hide();
                            break;
                        case 'MedicalCertificate':
                            allRows.filter(function() {
                                return $(this).data('medical-certificate') !== false;
                            }).hide();
                            break;
                        case 'VaccinationRecord':
                            allRows.filter(function() {
                                return $(this).data('vaccination-record') !== false;
                            }).hide();
                            break;
                        case 'Critical':
                            allRows.filter(function() {
                                return $(this).data('completion') >= 50;
                            }).hide();
                            break;
                    }
                }
                
                // Apply department filter
                if (currentDepartment) {
                    allRows.filter(function() {
                        return $(this).data('department') !== currentDepartment;
                    }).hide();
                }
                
                // Apply search filter
                if (currentSearch) {
                    var searchLower = currentSearch.toLowerCase();
                    allRows.filter(function() {
                        var studentName = $(this).data('student-name');
                        var email = $(this).data('email');
                        return !studentName.includes(searchLower) && !email.includes(searchLower);
                    }).hide();
                }
                
                // Update statistics after filtering
                updateStats();
                
                // Update URL without page reload
                updateURL();
            }
            
            // Update URL based on current filters
            function updateURL() {
                var newUrl = '@Url.Action("StudentHealthStatus")';
                var params = [];
                
                if (currentRequirement) params.push('requirement=' + currentRequirement);
                if (currentDepartment) params.push('department=' + currentDepartment);
                
                if (params.length > 0) {
                    newUrl += '?' + params.join('&');
                }
                
                history.pushState({}, '', newUrl);
            }
            
            // Requirement filter change - real-time
            $('#requirementFilter').on('change', function() {
                currentRequirement = $(this).val();
                applyFilters();
            });
            
            // Department filter change - real-time
            $('#departmentFilter').on('change', function() {
                currentDepartment = $(this).val();
                applyFilters();
            });
            
            // Search input - real-time as user types
            $('#searchInput').on('input', function() {
                currentSearch = $(this).val();
                // Use debounce for better performance during rapid typing
                clearTimeout($(this).data('timeout'));
                $(this).data('timeout', setTimeout(function() {
                    applyFilters();
                }, 200));
            });
            
            // Reset filters
            $('#resetFilters').click(function() {
                // Reset filter values
                $('#requirementFilter').val('');
                $('#departmentFilter').val('');
                $('#searchInput').val('');
                
                // Reset filter variables
                currentRequirement = '';
                currentDepartment = '';
                currentSearch = '';
                
                // Show all rows
                $('#studentsTable tbody tr').show();
                
                // Update stats
                updateStats();
                
                // Update URL
                history.pushState({}, '', '@Url.Action("StudentHealthStatus")');
            });
            
            // Update statistics based on visible rows
            function updateStats() {
                var visibleRows = $('#studentsTable tbody tr:visible');
                var totalStudents = visibleRows.length;
                var completeCount = 0;
                var incompleteCount = 0;
                
                visibleRows.each(function() {
                    var completion = parseInt($(this).data('completion'));
                    
                    if (completion === 100) completeCount++;
                    else incompleteCount++;
                });
                
                // Update stats cards with animation
                animateCounter('#totalStudentsCount', totalStudents);
                animateCounter('#completeCount', completeCount);
                animateCounter('#incompleteCount', incompleteCount);
            }
            
            // Animate counter for stats
            function animateCounter(selector, target) {
                var $element = $(selector);
                var current = parseInt($element.text());
                var increment = (target - current) / 20;
                var duration = 500; // milliseconds
                var interval = duration / 20;
                
                var timer = setInterval(function() {
                    current += increment;
                    if ((increment > 0 && current >= target) || 
                        (increment < 0 && current <= target)) {
                        $element.text(target);
                        clearInterval(timer);
                    } else {
                        $element.text(Math.round(current));
                    }
                }, interval);
            }
            
            // Add sorting capability without DataTables
            $('#studentsTable th').click(function() {
                var table = $(this).parents('table').eq(0);
                var rows = table.find('tr:gt(0)').toArray().sort(comparator($(this).index()));
                this.asc = !this.asc;
                if (!this.asc) {
                    rows = rows.reverse();
                }
                // Remove sort indicators
                table.find('th').removeClass('sorting_asc sorting_desc');
                // Add new sort indicator
                $(this).addClass(this.asc ? 'sorting_asc' : 'sorting_desc');
                
                for (var i = 0; i < rows.length; i++) {
                    table.append(rows[i]);
                }
            });
            
            // Comparator function for sorting
            function comparator(index) {
                return function(a, b) {
                    var valA = getCellValue(a, index);
                    var valB = getCellValue(b, index);
                    if ($.isNumeric(valA) && $.isNumeric(valB)) {
                        return valA - valB;
                    } else {
                        return valA.localeCompare(valB);
                    }
                };
            }
            
            // Get cell value for sorting
            function getCellValue(row, index) {
                var cell = $(row).children('td').eq(index);
                // For completion column, extract percentage
                if (index === 8) {
                    return parseInt($(cell).find('.progress-bar').attr('aria-valuenow'));
                }
                // For other cells, get text content
                return cell.text().trim();
            }
            
            // Export to Excel functionality
            $('#exportToExcel').click(function() {
                // Create a worksheet with visible data only
                var filteredData = [];
                var headers = [];
                
                // Get headers
                $('#studentsTable thead th').each(function() {
                    headers.push($(this).text());
                });
                filteredData.push(headers);
                
                // Get filtered/visible data
                $('#studentsTable tbody tr:visible').each(function() {
                    var rowData = [];
                    $(this).find('td').each(function() {
                        // Clean the data (remove HTML tags)
                        var text = $(this).text().trim();
                        // Handle completion percentage column
                        if ($(this).find('.progress-bar').length) {
                            text = $(this).find('.progress-bar').text().trim();
                        }
                        rowData.push(text);
                    });
                    filteredData.push(rowData);
                });
                
                // Create workbook and add worksheet
                var wb = XLSX.utils.book_new();
                var ws = XLSX.utils.aoa_to_sheet(filteredData);
                
                // Add the worksheet to the workbook
                XLSX.utils.book_append_sheet(wb, ws, "Student Health Status");
                
                // Generate file and trigger download
                var wbout = XLSX.write(wb, {bookType:'xlsx', type: 'binary'});
                
                function s2ab(s) {
                    var buf = new ArrayBuffer(s.length);
                    var view = new Uint8Array(buf);
                    for (var i=0; i<s.length; i++) view[i] = s.charCodeAt(i) & 0xFF;
                    return buf;
                }
                
                // Generate filename with department and requirement if filtered
                var filename = "student_health_status";
                if (currentDepartment) filename += "_" + currentDepartment.replace(/\s+/g, "_");
                if (currentRequirement) filename += "_" + currentRequirement;
                filename += ".xlsx";
                
                saveAs(new Blob([s2ab(wbout)],{type:"application/octet-stream"}), filename);
            });
            
            // Apply initial filtering
            applyFilters();
        });
        
        // Show health alerts in modal
        function showHealthAlerts(alerts) {
            var alertsList = $('#healthAlertsList');
            alertsList.empty();
            
            if (alerts && alerts.length > 0) {
                alerts.split(', ').forEach(function(alert) {
                    alertsList.append('<li class="list-group-item"><i class="fas fa-exclamation-triangle text-warning me-2"></i>' + alert + '</li>');
                });
            } else {
                alertsList.append('<li class="list-group-item">No health alerts found</li>');
            }
            
            var healthAlertsModal = new bootstrap.Modal(document.getElementById('healthAlertsModal'));
            healthAlertsModal.show();
        }
    </script>
    
    <style>
        /* Add sorting indicators */
        #studentsTable th {
            cursor: pointer;
            position: relative;
        }
        
        #studentsTable th:after {
            content: "\f0dc";
            font-family: "Font Awesome 5 Free";
            font-weight: 900;
            position: absolute;
            right: 8px;
            color: #ccc;
        }
        
        #studentsTable th.sorting_asc:after {
            content: "\f0de";
            color: #007bff;
        }
        
        #studentsTable th.sorting_desc:after {
            content: "\f0dd";
            color: #007bff;
        }
        
        /* Improve table responsiveness */
        .table-responsive {
            padding-bottom: 15px;
        }
        
        /* Animated transitions */
        #studentsTable tbody tr {
            transition: opacity 0.2s ease-in-out;
        }
    </style>
}