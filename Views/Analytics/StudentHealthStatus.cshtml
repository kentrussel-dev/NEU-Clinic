@using Microsoft.EntityFrameworkCore;
@model WebApp.Models.ViewModels.StudentHealthStatusViewModel
@inject WebApp.Data.AppDbContext _context
@{
    ViewData["Title"] = "Student Health Requirements Status";
    Layout = "~/Views/Shared/Layouts/_DashboardLayout.cshtml";
}

<link rel="stylesheet" href="~/css/superadmin.css" asp-append-version="true" />
<script src="https://cdnjs.cloudflare.com/ajax/libs/Chart.js/3.7.1/chart.min.js"></script>

<style>
    /* Multi-level dropdown styling */
    .dropdown-submenu {
        position: relative;
    }

    .dropdown-submenu .dropdown-menu {
        top: 0;
        left: 100%;
        margin-top: -1px;
    }
    using Microsoft.EntityFrameworkCore;
    using Microsoft.EntityFrameworkCore;
    using Microsoft.EntityFrameworkCore;

    .dropdown-submenu:hover > .dropdown-menu {
        display: block;
    }

    .dropdown-submenu > a:after {
        display: block;
        content: " ";
        float: right;
        width: 0;
        height: 0;
        border-color: transparent;
        border-style: solid;
        border-width: 5px 0 5px 5px;
        border-left-color: #ccc;
        margin-top: 5px;
        margin-right: -10px;
    }
    
    /* Filter row styling */
    .filter-row {
        display: flex;
        align-items: center;
        gap: 15px;
        margin-bottom: 20px;
    }
    
    .filter-group {
        flex: 1;
    }
    
    .filter-group-centered {
        flex: 1;
        display: flex;
        justify-content: center;
    }
    
    .filter-dropdown {
        width: 100%;
    }
    
    .filter-dropdown .btn {
        width: 100%;
        text-align: left;
        display: flex;
        align-items: center;
        justify-content: space-between;
    }
    
    .filter-dropdown .dropdown-menu {
        width: 100%;
    }

    /* Table modifications */
    .table {
        font-size: 0.75rem; /* Smaller font size */
    }

    .table th {
        white-space: nowrap; /* Prevent line breaks in headers */
        padding: 8px 4px; /* Smaller padding */
    }

    .table td {
        padding: 8px 4px; /* Smaller padding */
    }

    /* Equal width for document columns */
    .document-column {
        width: 120px !important; /* Fixed width for document columns */
        min-width: 120px !important;
        max-width: 120px !important;
    }

    /* Progress bar adjustments */
    .progress {
        height: 18px !important; /* Smaller progress bar */
    }

    /* Modal Styles */
    #confirmationModal .modal-header {
        background-color: #ffc107;
        color: white;
    }

    #loadingModal .modal-content {
        border: none;
        border-radius: 10px;
    }

    #loadingModal .modal-header {
        border-bottom: none;
        padding-bottom: 0;
    }

    #loadingModal .modal-body {
        padding-top: 0;
    }

    #emailProgressBar {
        transition: width 0.3s ease;
        height: 20px;
    }

    /* Toast Notifications */
    .toast-container {
        position: fixed;
        top: 20px;
        right: 20px;
        z-index: 1100;
    }

    .toast {
        margin-bottom: 10px;
    }

    /* Progress Bar Colors */
    .bg-success {
        background-color: #28a745 !important;
    }

    .bg-warning {
        background-color: #ffc107 !important;
    }
</style>

<div class="container my-4">
    <div class="position-relative mb-4">
        <div class="text-center mb-4">
            <h2 class="d-inline-block p-4 border rounded shadow-sm bg-light">
                <i class="fas fa-heartbeat me-2"></i>Student Health Requirements Status
            </h2>
        </div>
        <a href="@Url.Action("Index", "Analytics")" class="btn btn-primary btn-modern position-absolute top-0 end-0">
            <i class="fas fa-arrow-left"></i> Back to Dashboard
        </a>
    </div>

    @if (TempData["SuccessMessage"] != null)
{
    <div class="alert alert-success alert-dismissible fade show" role="alert">
        <i class="fas fa-check-circle me-2"></i>
        @TempData["SuccessMessage"]
        <button type="button" class="btn-close" data-bs-dismiss="alert" aria-label="Close"></button>
    </div>
}

    <!-- Statistics Cards -->
    <div class="row mb-4">
        <div class="col-xl-4 col-md-6 mb-4">
            <div class="card border-left-primary shadow h-100 py-2">
                <div class="card-body">
                    <div class="row no-gutters align-items-center">
                        <div class="col mr-2">
                            <div class="text-xs font-weight-bold text-primary text-uppercase mb-1">
                                Total Students</div>
                            <div class="h5 mb-0 font-weight-bold text-gray-800" id="totalStudentsCount">@Model.Students.Count</div>
                        </div>
                        <div class="col-auto">
                            <i class="fas fa-users fa-2x text-gray-300"></i>
                        </div>
                    </div>
                </div>
            </div>
        </div>

        <div class="col-xl-4 col-md-6 mb-4">
            <div class="card border-left-success shadow h-100 py-2">
                <div class="card-body">
                    <div class="row no-gutters align-items-center">
                        <div class="col mr-2">
                            <div class="text-xs font-weight-bold text-success text-uppercase mb-1">
                                Complete Records (100%)</div>
                            <div class="h5 mb-0 font-weight-bold text-gray-800" id="completeCount">@Model.Students.Count(s => s.CompletionPercentage == 100)</div>
                        </div>
                        <div class="col-auto">
                            <i class="fas fa-check-circle fa-2x text-gray-300"></i>
                        </div>
                    </div>
                </div>
            </div>
        </div>

        <div class="col-xl-4 col-md-6 mb-4">
            <div class="card border-left-danger shadow h-100 py-2">
                <div class="card-body">
                    <div class="row no-gutters align-items-center">
                        <div class="col mr-2">
                            <div class="text-xs font-weight-bold text-danger text-uppercase mb-1">
                                Incomplete Records (<100%)</div>
                            <div class="h5 mb-0 font-weight-bold text-gray-800" id="incompleteCount">@Model.Students.Count(s => s.CompletionPercentage < 100)</div>
                        </div>
                        <div class="col-auto">
                            <i class="fas fa-exclamation-circle fa-2x text-gray-300"></i>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>

    <!-- Current Expiry Date Display -->
    <div class="row mb-4">
        <div class="col-12">
            <div class="card shadow">
                <div class="card-header py-3 d-flex flex-row align-items-center justify-content-between">
                    <h6 class="m-0 font-weight-bold text-primary">
                        <i class="fas fa-calendar-alt me-2"></i>Current Document Expiry Configuration
                    </h6>
                </div>
                <div class="card-body">
                    @{
                        var systemConfig = await _context.SystemConfigurations.FirstOrDefaultAsync();
                        var expiryDate = systemConfig?.HealthDocumentsExpiryDate;
                    }
                    <div class="d-flex align-items-center justify-content-between">
                        <div>
                            <h5 class="mb-0">
                                @if (expiryDate.HasValue)
                                {
                                    <span class="text-success">Current Expiry Date: @expiryDate.Value.ToString("MMMM dd, yyyy")</span>
                                }
                                else
                                {
                                    <span class="text-danger">No expiry date configured</span>
                                }
                            </h5>
                            <small class="text-muted">All health documents will expire on this date</small>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>

    <!-- Updated Filter Row with Consistent Design -->
    <div class="filter-row">
        <!-- Name/Email Filter -->
        <div class="filter-group">
            <div class="input-group">
                <span class="input-group-text"><i class="fas fa-search"></i></span>
                <input type="text" id="nameEmailFilter" class="form-control" placeholder="Filter by name or email...">
            </div>
        </div>


        <!-- Department Filter -->
        <div class="filter-group">
            <div class="dropdown filter-dropdown">
                <button class="btn btn-white border dropdown-toggle" type="button" id="departmentFilterDropdown" data-bs-toggle="dropdown" aria-expanded="false">
                    <i class="fas fa-building me-2"></i>
                    <span id="selectedDepartmentFilterText">All Departments</span>
                </button>
                <ul class="dropdown-menu" aria-labelledby="departmentFilterDropdown">
                    <li><a class="dropdown-item" href="#" data-department-value="">All Departments</a></li>
                    @foreach (var department in Model.Students.Select(s => s.Department).Distinct().Where(d => !string.IsNullOrEmpty(d)).OrderBy(d => d))
                    {
                        <li><a class="dropdown-item" href="#" data-department-value="@department">@department</a></li>
                    }
                </ul>
            </div>
        </div>

        <!-- Document Status Filter (Centered) -->
        <div class="filter-group">
            <div class="dropdown filter-dropdown" style="max-width: 300px;">
                <button class="btn btn-white border dropdown-toggle" type="button" id="documentFilterDropdown" data-bs-toggle="dropdown" aria-expanded="false">
                    <i class="fas fa-file-medical me-2"></i>
                    <span id="selectedFilterText">All Document Statuses</span>
                </button>
                <ul class="dropdown-menu" aria-labelledby="documentFilterDropdown">
                    <li><a class="dropdown-item" href="#" data-filter-value="">All Document Statuses</a></li>
                    
                    <!-- Emergency Contact Dropdown -->
                    <li class="dropdown-submenu">
                        <a class="dropdown-item dropdown-toggle" href="#">Emergency Contact</a>
                        <ul class="dropdown-menu">
                            <li><a class="dropdown-item" href="#" data-filter-value="emergency_complete">
                                <i class="fas fa-check-circle text-success me-2"></i><span class="text-success">Completed</span>
                            </a></li>
                            <li><a class="dropdown-item" href="#" data-filter-value="emergency_missing">
                                <i class="fas fa-times-circle text-danger me-2"></i><span class="text-danger">Missing</span>
                            </a></li>
                        </ul>
                    </li>
                    
                    <!-- X-Ray Dropdown -->
                    <li class="dropdown-submenu">
                        <a class="dropdown-item dropdown-toggle" href="#">X-Ray</a>
                        <ul class="dropdown-menu">
                            <li><a class="dropdown-item" href="#" data-filter-value="xray_complete">
                                <i class="fas fa-check-circle text-success me-2"></i><span class="text-success">Completed</span>
                            </a></li>
                            <li><a class="dropdown-item" href="#" data-filter-value="xray_missing">
                                <i class="fas fa-times-circle text-danger me-2"></i><span class="text-danger">Missing</span>
                            </a></li>
                        </ul>
                    </li>
                    
                    <!-- Medical Certificate Dropdown -->
                    <li class="dropdown-submenu">
                        <a class="dropdown-item dropdown-toggle" href="#">Medical Certificate</a>
                        <ul class="dropdown-menu">
                            <li><a class="dropdown-item" href="#" data-filter-value="medical_complete">
                                <i class="fas fa-check-circle text-success me-2"></i><span class="text-success">Completed</span>
                            </a></li>
                            <li><a class="dropdown-item" href="#" data-filter-value="medical_missing">
                                <i class="fas fa-times-circle text-danger me-2"></i><span class="text-danger">Missing</span>
                            </a></li>
                        </ul>
                    </li>
                    
                    <!-- Vaccination Record Dropdown -->
                    <li class="dropdown-submenu">
                        <a class="dropdown-item dropdown-toggle" href="#">Vaccination Record</a>
                        <ul class="dropdown-menu">
                            <li><a class="dropdown-item" href="#" data-filter-value="vaccine_complete">
                                <i class="fas fa-check-circle text-success me-2"></i><span class="text-success">Completed</span>
                            </a></li>
                            <li><a class="dropdown-item" href="#" data-filter-value="vaccine_missing">
                                <i class="fas fa-times-circle text-danger me-2"></i><span class="text-danger">Missing</span>
                            </a></li>
                        </ul>
                    </li>
                    
                    <!-- Combined Status -->
                    <li><hr class="dropdown-divider"></li>
                    <li><a class="dropdown-item" href="#" data-filter-value="all_complete">
                        <i class="fas fa-check-double text-success me-2"></i>All Documents Complete
                    </a></li>
                    <li><a class="dropdown-item" href="#" data-filter-value="any_missing">
                        <i class="fas fa-exclamation-triangle text-warning me-2"></i>Any Document Missing
                    </a></li>
                </ul>
            </div>
        </div>
    </div>


    <!-- Students Table -->
    <div class="card shadow mb-4 user-table">
        <div class="card-header py-3 d-flex flex-row align-items-center justify-content-between">
            <h6 class="m-0 font-weight-bold text-primary">Student Health Requirements Status</h6>
            <div class="d-flex align-items-center gap-2">
                <div class="dropdown">
                    <button class="btn btn-primary btn-modern dropdown-toggle" type="button" id="emailActionsDropdown" data-bs-toggle="dropdown" aria-expanded="false">
                        <i class="fas fa-envelope me-2"></i> Email Actions
                    </button>
                    <ul class="dropdown-menu" aria-labelledby="emailActionsDropdown">
                        <li>
                            <button class="dropdown-item" type="button" id="sendIncompleteReminder">
                                <i class="fas fa-exclamation-circle text-warning me-2"></i>Send Reminder to Incomplete
                            </button>
                        </li>
                        <li>
                            <button class="dropdown-item" type="button" id="sendExpiryReminder">
                                <i class="fas fa-clock text-danger me-2"></i>Send Expiration Reminders
                            </button>
                        </li>
                    </ul>
                </div>
                <!-- Add this to your existing code, right after the Email Actions dropdown -->
                <div class="dropdown">
                    <button class="btn btn-secondary btn-modern dropdown-toggle" type="button" id="adminActionsDropdown" data-bs-toggle="dropdown" aria-expanded="false">
                        <i class="fas fa-cog me-2"></i> Actions
                    </button>
                    <ul class="dropdown-menu" aria-labelledby="adminActionsDropdown">
                        <li>
                            <button class="dropdown-item" type="button" id="setGlobalExpiry" data-bs-toggle="modal" data-bs-target="#globalExpiryModal">
                                <i class="fas fa-calendar-day text-primary me-2"></i>Set Expiry to All Documents
                            </button>
                        </li>
                        <li>
                            <button class="dropdown-item" type="button" id="archiveAllDocuments" data-bs-toggle="modal" data-bs-target="#archiveConfirmationModal">
                                <i class="fas fa-archive text-warning me-2"></i>Archive All Documents
                            </button>
                        </li>
                    </ul>
                </div>
                
                <button class="btn btn-success btn-modern" id="exportToExcel">
                    <i class="fas fa-file-excel me-2"></i> Export to Excel
                </button>   
            </div>
        </div>
        <div class="card-body p-0">
            <div class="table-responsive">
                <table class="table table-bordered table-striped table-hover mb-0" id="studentsTable">
                    <thead>
                        <tr>
                            <th class="text-center align-middle" style="width: 80px;">Profile</th>
                            <th class="text-center align-middle">Student Name</th>
                            <th class="text-center align-middle">Department</th>
                            <th class="text-center align-middle">Blood Type</th>
                            <th class="text-center align-middle document-column">Emergency Contact</th>
                            <th class="text-center align-middle document-column">X-Ray</th>
                            <th class="text-center align-middle document-column">Medical Certificate</th>
                            <th class="text-center align-middle document-column">Vaccination Record</th>
                            <th class="text-center align-middle">Completion</th>
                        </tr>
                    </thead>
                    <tbody>
                        @foreach (var student in Model.Students)
                        {
                            <tr>
                                <td class="text-center align-middle">
                                    <img src="@student.ProfilePictureUrl" class="profile-img rounded-circle" alt="Profile" style="width: 40px; height: 40px; object-fit: cover;">
                                </td>
                                <td class="text-center align-middle">
                                    <div class="text-nowrap">
                                        <div class="fw-bold">@student.FullName</div>
                                        <div class="small text-muted">@student.Email</div>
                                    </div>
                                </td>
                                <td class="text-center align-middle">@(string.IsNullOrEmpty(student.Department) ? "Not Specified" : student.Department)</td>
                                <td class="text-center align-middle">
                                    @if (!string.IsNullOrEmpty(student.BloodType))
                                    {
                                        <span class="badge bg-success rounded-pill px-2 py-1">@student.BloodType</span>
                                    }
                                    else
                                    {
                                        <span class="badge bg-danger rounded-pill px-2 py-1">Missing</span>
                                    }
                                </td>
                                <td class="text-center align-middle document-column">
                                    @if (student.HasEmergencyContact)
                                    {
                                        <i class="fas fa-check-circle text-success"></i>
                                    }
                                    else
                                    {
                                        <i class="fas fa-times-circle text-danger"></i>
                                    }
                                </td>
                                <td class="text-center align-middle document-column">
                                    @if (student.HasXRay)
                                    {
                                        <i class="fas fa-check-circle text-success"></i>
                                    }
                                    else
                                    {
                                        <i class="fas fa-times-circle text-danger"></i>
                                    }
                                </td>
                                <td class="text-center align-middle document-column">
                                    @if (student.HasMedicalCertificate)
                                    {
                                        <i class="fas fa-check-circle text-success"></i>
                                    }
                                    else
                                    {
                                        <i class="fas fa-times-circle text-danger"></i>
                                    }
                                </td>
                                <td class="text-center align-middle document-column">
                                    @if (student.HasVaccinationRecord)
                                    {
                                        <i class="fas fa-check-circle text-success"></i>
                                    }
                                    else
                                    {
                                        <i class="fas fa-times-circle text-danger"></i>
                                    }
                                </td>
                                <td class="text-center align-middle">
                                    <div class="progress">
                                        @{
                                            var colorClass = student.CompletionPercentage == 100 ? "bg-success" : 
                                                            student.CompletionPercentage >= 70 ? "bg-info" :
                                                            student.CompletionPercentage >= 40 ? "bg-warning" : "bg-danger";
                                        }
                                        <div class="progress-bar @colorClass" role="progressbar" 
                                            style="width: @student.CompletionPercentage%;" 
                                            aria-valuenow="@student.CompletionPercentage" aria-valuemin="0" aria-valuemax="100">
                                            @student.CompletionPercentage%
                                        </div>
                                    </div>
                                </td>
                            </tr>
                        }
                    </tbody>
                </table>
            </div>
        </div>
    </div>
</div>

<!-- Confirmation Modal -->
<div class="modal fade" id="confirmationModal" tabindex="-1" aria-hidden="true">
    <div class="modal-dialog modal-dialog-centered">
        <div class="modal-content">
            <div class="modal-header bg-primary">
                <h5 class="modal-title text-white"><i class="fas fa-exclamation-triangle me-2"></i>Confirm Action</h5>
                <button type="button" class="btn-close btn-close-white" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <div class="modal-body">
                <p>Are you sure you want to send reminder emails to all students with incomplete health requirements?</p>
                <p class="fw-bold" id="incompleteCountText"></p>
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cancel</button>
                <button type="button" class="btn btn-primary" id="confirmSend">Send Reminders</button>
            </div>
        </div>
    </div>
</div>

<!-- Expiration Confirmation Modal -->
<div class="modal fade" id="expiryConfirmationModal" tabindex="-1" aria-hidden="true">
    <div class="modal-dialog modal-dialog-centered">
        <div class="modal-content">
            <div class="modal-header bg-primary">
                <h5 class="modal-title text-white"><i class="fas fa-clock me-2"></i>Confirm Expiration Reminders</h5>
                <button type="button" class="btn-close btn-close-white" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <div class="modal-body">
                <p>Are you sure you want to send expiration reminder emails to all students?</p>
                <div class="alert alert-info">
                    <i class="fas fa-info-circle me-2"></i>
                    This will notify students about upcoming document expirations, even if their documents are currently complete.
                </div>
                <p class="fw-bold" id="expiryCountText"></p>
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cancel</button>
                <button type="button" class="btn btn-primary" id="confirmExpirySend">Send Reminders</button>
            </div>
        </div>
    </div>
</div>

<!-- Loading Modal -->
<div class="modal fade" id="loadingModal" tabindex="-1" aria-hidden="true" data-bs-backdrop="static" data-bs-keyboard="false">
    <div class="modal-dialog modal-dialog-centered">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title">Sending Reminders</h5>
            </div>
            <div class="modal-body">
                <div class="text-center mb-3">
                    <div class="spinner-border text-primary" role="status" style="width: 3rem; height: 3rem;">
                        <span class="visually-hidden">Loading...</span>
                    </div>
                </div>
                <div class="progress mb-3">
                    <div id="emailProgressBar" class="progress-bar progress-bar-striped progress-bar-animated" 
                         role="progressbar" style="width: 0%"></div>
                </div>
                <div class="text-center">
                    <p id="progressText">Preparing to send emails...</p>
                    <p id="countText" class="small text-muted">0/0 emails sent</p>
                    <p id="failedText" class="small text-danger d-none"></p>
                </div>
            </div>
        </div>
    </div>
</div>

<!-- Add these modals at the bottom of your existing modals -->
<!-- Global Expiry Modal -->
<div class="modal fade" id="globalExpiryModal" tabindex="-1" aria-hidden="true">
    <div class="modal-dialog modal-dialog-centered">
        <div class="modal-content">
            <div class="modal-header bg-primary">
                <h5 class="modal-title text-white"><i class="fas fa-calendar-day me-2"></i>Set Global Expiry Date</h5>
                <button type="button" class="btn-close btn-close-white" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <div class="modal-body">
                <div class="mb-3">
                    <label for="globalExpiryDate" class="form-label">Select Expiry Date for All Documents</label>
                    <input type="date" class="form-control" id="globalExpiryDate">
                </div>
                <div class="alert alert-warning">
                    <i class="fas fa-exclamation-triangle me-2"></i>
                    This will set the same expiry date for all student health documents (Emergency Contact, X-Ray, Medical Certificate, and Vaccination Record).
                </div>
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cancel</button>
                <button type="button" class="btn btn-primary" id="confirmGlobalExpiry">Set Expiry Date</button>
            </div>
        </div>
    </div>
</div>

<!-- Archive Confirmation Modal -->
<div class="modal fade" id="archiveConfirmationModal" tabindex="-1" aria-hidden="true">
    <div class="modal-dialog modal-dialog-centered">
        <div class="modal-content">
            <div class="modal-header bg-warning">
                <h5 class="modal-title"><i class="fas fa-archive me-2"></i>Confirm Archive Action</h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <div class="modal-body">
                <p>Are you sure you want to archive all student health documents?</p>
                <div class="alert alert-danger">
                    <i class="fas fa-exclamation-circle me-2"></i>
                    <strong>Warning:</strong> This action will move all documents to archive. Students will need to re-upload their documents.
                </div>
                <p class="fw-bold">Total documents to archive: <span id="totalDocumentsCount">@Model.Students.Count</span></p>
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cancel</button>
                <button type="button" class="btn btn-warning" id="confirmArchive">Archive All Documents</button>
            </div>
        </div>
    </div>
</div>

@section Scripts {
    <script src="https://cdnjs.cloudflare.com/ajax/libs/FileSaver.js/2.0.5/FileSaver.min.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/xlsx/0.16.9/xlsx.full.min.js"></script>

    <script>
        $(document).ready(function() {
            // Initialize tooltips
            var tooltipTriggerList = [].slice.call(document.querySelectorAll('[data-bs-toggle="tooltip"]'));
            var tooltipList = tooltipTriggerList.map(function (tooltipTriggerEl) {
                return new bootstrap.Tooltip(tooltipTriggerEl);
            });

            // Name/Email filter functionality
            $('#nameEmailFilter').on('keyup', function() {
                var filter = $(this).val().toLowerCase();
                $('#studentsTable tbody tr').each(function() {
                    var name = $(this).find('td:nth-child(2)').text().toLowerCase();
                    var email = $(this).find('td:nth-child(2) .small').text().toLowerCase();
                    var matches = name.includes(filter) || email.includes(filter);
                    $(this).toggle(matches);
                });
                updateCounts();
            });

            // Department filter functionality
            $('[data-department-value]').on('click', function(e) {
                e.preventDefault();
                var department = $(this).data('department-value');
                $('#selectedDepartmentFilterText').text(department ? department : "All Departments");
                
                if (!department) {
                    $('#studentsTable tbody tr').show();
                } else {
                    $('#studentsTable tbody tr').each(function() {
                        var rowDepartment = $(this).find('td:nth-child(3)').text().trim();
                        $(this).toggle(rowDepartment === department);
                    });
                }
                updateCounts();
            });

            // Function to update the counts after filtering
            function updateCounts() {
                var visibleRows = $('#studentsTable tbody tr:visible').length;
                var completeCount = $('#studentsTable tbody tr:visible').filter(function() {
                    return $(this).find('.progress-bar').text().trim() === '100%';
                }).length;
                var incompleteCount = $('#studentsTable tbody tr:visible').filter(function() {
                    return $(this).find('.progress-bar').text().trim() !== '100%';
                }).length;

                $('#totalStudentsCount').text(visibleRows);
                $('#completeCount').text(completeCount);
                $('#incompleteCount').text(incompleteCount);
            }
            
            // Multi-level dropdown handling
            $('.dropdown-submenu > a').on('click', function(e) {
                e.stopPropagation();
                e.preventDefault();
                $(this).next('.dropdown-menu').toggle();
            });
            
            // Handle document filter clicks
            $('.dropdown-menu a[data-filter-value]').on('click', function(e) {
                e.preventDefault();
                var filterValue = $(this).data('filter-value');
                $('#selectedFilterText').text($(this).text().trim());
                
                // Apply filtering logic
                $('#studentsTable tbody tr').each(function() {
                    var showRow = true;
                    
                    if (filterValue) {
                        if (filterValue === 'all_complete') {
                            showRow = $(this).find('td:nth-child(5) i.fa-check-circle').length > 0 &&
                                        $(this).find('td:nth-child(6) i.fa-check-circle').length > 0 &&
                                        $(this).find('td:nth-child(7) i.fa-check-circle').length > 0 &&
                                        $(this).find('td:nth-child(8) i.fa-check-circle').length > 0;
                        } 
                        else if (filterValue === 'any_missing') {
                            showRow = $(this).find('td:nth-child(5) i.fa-times-circle').length > 0 ||
                                        $(this).find('td:nth-child(6) i.fa-times-circle').length > 0 ||
                                        $(this).find('td:nth-child(7) i.fa-times-circle').length > 0 ||
                                        $(this).find('td:nth-child(8) i.fa-times-circle').length > 0;
                        }
                        else {
                            var parts = filterValue.split('_');
                            var documentType = parts[0];
                            var status = parts[1];
                            
                            var columnIndex = {
                                'emergency': 5,
                                'xray': 6,
                                'medical': 7,
                                'vaccine': 8
                            }[documentType];
                            
                            if (columnIndex) {
                                var hasCheck = $(this).find('td:nth-child(' + columnIndex + ') i.fa-check-circle').length > 0;
                                var hasTimes = $(this).find('td:nth-child(' + columnIndex + ') i.fa-times-circle').length > 0;
                                
                                showRow = (status === 'complete' && hasCheck) || 
                                            (status === 'missing' && hasTimes);
                            }
                        }
                    }
                    
                    $(this).toggle(showRow);
                });
                updateCounts();
            });

            // Export to Excel functionality
            $('#exportToExcel').click(function() {
                // Create a worksheet with visible data only
                var filteredData = [];
                var headers = [];
                
                // Get headers
                $('#studentsTable thead th').each(function() {
                    headers.push($(this).text());
                });
                filteredData.push(headers);
                
                // Get filtered/visible data
                $('#studentsTable tbody tr:visible').each(function() {
                    var rowData = [];
                    $(this).find('td').each(function() {
                        // Clean the data (remove HTML tags)
                        var text = $(this).text().trim();
                        // Handle completion percentage column
                        if ($(this).find('.progress-bar').length) {
                            text = $(this).find('.progress-bar').text().trim();
                        }
                        rowData.push(text);
                    });
                    filteredData.push(rowData);
                });
                
                // Create workbook and add worksheet
                var wb = XLSX.utils.book_new();
                var ws = XLSX.utils.aoa_to_sheet(filteredData);
                
                // Add the worksheet to the workbook
                XLSX.utils.book_append_sheet(wb, ws, "Student Health Status");
                
                // Generate file and trigger download
                var wbout = XLSX.write(wb, {bookType:'xlsx', type: 'binary'});
                
                function s2ab(s) {
                    var buf = new ArrayBuffer(s.length);
                    var view = new Uint8Array(buf);
                    for (var i=0; i<s.length; i++) view[i] = s.charCodeAt(i) & 0xFF;
                    return buf;
                }
                
                saveAs(new Blob([s2ab(wbout)],{type:"application/octet-stream"}), "student_health_status.xlsx");
            });

            // Email Reminders Functionality
            $(document).on('click', '#sendIncompleteReminder', function() {
                // Show confirmation modal
                var confirmationModal = new bootstrap.Modal(document.getElementById('confirmationModal'));
                
                // Get incomplete count first
                $.get('/EmailSender/GetIncompleteStudentCount', function(count) {
                    if (count === 0) {
                        showToast('info', 'No students with incomplete requirements found');
                        return;
                    }
                    
                    $('#incompleteCountText').text(`Found ${count} students with incomplete requirements.`);
                    confirmationModal.show();
                }).fail(function() {
                    showToast('error', 'Failed to get student count');
                });
            });

            // Confirm send button
            $('#confirmSend').click(function() {
                var confirmationModal = bootstrap.Modal.getInstance(document.getElementById('confirmationModal'));
                confirmationModal.hide();
                
                // Show loading modal
                var loadingModal = new bootstrap.Modal(document.getElementById('loadingModal'));
                loadingModal.show();
                
                // Start sending emails
                sendEmailsInBatches(loadingModal);
            });

            function sendEmailsInBatches(modal) {
                let totalCount = 0;
                let emailsSent = 0;
                let failedEmails = 0;
                const batchSize = 5; // Number of emails to send per batch
                
                function updateProgress() {
                    const totalProcessed = emailsSent + failedEmails;
                    const progress = Math.floor(totalProcessed / totalCount * 100);
                    
                    $('#emailProgressBar').css('width', progress + '%');
                    $('#countText').text(`${totalProcessed}/${totalCount} emails processed`);
                    
                    if (failedEmails > 0) {
                        $('#failedText').text(`${failedEmails} failed`).removeClass('d-none');
                    }
                    
                    if (totalProcessed >= totalCount) {
                        // All emails processed
                        $('#emailProgressBar').removeClass('progress-bar-animated')
                                             .addClass(failedEmails > 0 ? 'bg-warning' : 'bg-success');
                        $('#progressText').html(
                            `Completed!<br>${emailsSent} sent successfully, ${failedEmails} failed`
                        );
                        
                        // Close modal after delay
                        setTimeout(() => {
                            modal.hide();
                            window.location.reload(); // Refresh to show updated status
                        }, 2000);
                    }
                }
                
                function sendNextBatch() {
                    $.ajax({
                        url: '/EmailSender/SendReminderBatch',
                        type: 'POST',
                        data: { batchSize: batchSize },
                        headers: {
                            'RequestVerificationToken': $('input[name="__RequestVerificationToken"]').val()
                        },
                        success: function(response) {
                            emailsSent += response.sentCount;
                            failedEmails += response.failedCount;
                            
                            updateProgress();
                            
                            if (emailsSent + failedEmails < totalCount) {
                                // Send next batch
                                setTimeout(sendNextBatch, 500);
                            }
                        },
                        error: function() {
                            modal.hide();
                            showToast('error', 'Error sending batch of emails');
                        }
                    });
                }
                
                // Get total count first
                $.get('/EmailSender/GetIncompleteStudentCount', function(count) {
                    totalCount = count;
                    $('#countText').text(`0/${totalCount} emails processed`);
                    
                    // Start first batch
                    sendNextBatch();
                }).fail(function() {
                    modal.hide();
                    showToast('error', 'Failed to get student count');
                });
            }

            // Expiry Reminders
            $(document).on('click', '#sendExpiryReminder', function() {
                // Show confirmation modal
                var expiryModal = new bootstrap.Modal(document.getElementById('expiryConfirmationModal'));
                
                // Get count of students with expiring documents first
                $.get('/EmailSender/GetExpiringDocumentCount', function(count) {
                    if (count === 0) {
                        showToast('info', 'No students with expiring documents found');
                        return;
                    }
                    
                    $('#expiryCountText').text(`Found ${count} students with expiring documents.`);
                    expiryModal.show();
                }).fail(function() {
                    showToast('error', 'Failed to get expiring document count');
                });
            });

            // Confirm expiry send button
            $('#confirmExpirySend').click(function() {
                var expiryModal = bootstrap.Modal.getInstance(document.getElementById('expiryConfirmationModal'));
                expiryModal.hide();
                
                // Show loading modal
                var loadingModal = new bootstrap.Modal(document.getElementById('loadingModal'));
                loadingModal.show();
                
                // Start sending expiry emails
                sendExpiryEmailsInBatches(loadingModal);
            });

            function sendExpiryEmailsInBatches(modal) {
                let totalCount = 0;
                let emailsSent = 0;
                let failedEmails = 0;
                const batchSize = 5;
                let isProcessing = false;

                function updateProgress() {
                    const totalProcessed = emailsSent + failedEmails;
                    const progress = Math.floor(totalProcessed / totalCount * 100);
                    
                    $('#emailProgressBar').css('width', progress + '%');
                    $('#countText').text(`${totalProcessed}/${totalCount} emails processed`);
                    $('#progressText').text(`Sending expiration reminders...`);
                    
                    if (failedEmails > 0) {
                        $('#failedText').text(`${failedEmails} failed`).removeClass('d-none');
                    }
                    
                    if (totalProcessed >= totalCount) {
                        $('#emailProgressBar').removeClass('progress-bar-animated')
                                            .addClass(failedEmails > 0 ? 'bg-warning' : 'bg-success');
                        $('#progressText').html(
                            `Completed!<br>${emailsSent} expiration reminders sent, ${failedEmails} failed`
                        );
                        
                        setTimeout(() => {
                            modal.hide();
                            if (emailsSent > 0) {
                                showToast('success', `Sent ${emailsSent} expiration reminders`);
                            }
                            if (failedEmails > 0) {
                                showToast('warning', `Failed to send ${failedEmails} reminders`);
                            }
                        }, 2000);
                    }
                }
                
                function sendNextBatch() {
                    if (isProcessing) return;
                    isProcessing = true;
                    
                    $.ajax({
                        url: '/EmailSender/SendExpiryReminderBatch',
                        type: 'POST',
                        data: { batchSize: batchSize },
                        headers: {
                            'RequestVerificationToken': $('input[name="__RequestVerificationToken"]').val()
                        },
                        success: function(response) {
                            if (response.success) {
                                emailsSent += response.sentCount;
                                failedEmails += response.failedCount;
                                
                                updateProgress();
                                
                                if (emailsSent + failedEmails < totalCount) {
                                    setTimeout(() => {
                                        isProcessing = false;
                                        sendNextBatch();
                                    }, 500);
                                }
                            } else {
                                modal.hide();
                                showToast('error', response.message || 'Failed to send expiry reminders');
                            }
                        },
                        error: function(xhr) {
                            console.error("Error:", xhr.responseText);
                            modal.hide();
                            showToast('error', 'Error sending batch of expiration reminders');
                        },
                        complete: function() {
                            isProcessing = false;
                        }
                    });
                }
                
                // Get total count first
                $.get('/EmailSender/GetExpiringDocumentCount')
                    .done(function(count) {
                        if (count === 0) {
                            modal.hide();
                            showToast('info', 'No documents are expiring soon');
                            return;
                        }
                        
                        totalCount = count;
                        $('#countText').text(`0/${totalCount} emails processed`);
                        sendNextBatch();
                    })
                    .fail(function(xhr) {
                        console.error("Count error:", xhr.responseText);
                        modal.hide();
                        showToast('error', 'Failed to get expiring document count');
                    });
            }

            // Global Expiry Date Configuration
            $(document).on('click', '#confirmGlobalExpiry', function() {
                var expiryDate = $('#globalExpiryDate').val();
                if (!expiryDate) {
                    showToast('error', 'Please select a valid expiry date');
                    return;
                }

                var modal = bootstrap.Modal.getInstance(document.getElementById('globalExpiryModal'));
                modal.hide();

                // Show loading modal
                var loadingModal = new bootstrap.Modal(document.getElementById('loadingModal'));
                loadingModal.show();
                $('#progressText').text('Setting global expiry date...');
                $('#emailProgressBar').css('width', '0%');

                $.ajax({
                    url: '/EmailSender/SetGlobalExpiryDate',
                    type: 'POST',
                    contentType: 'application/json',
                    data: JSON.stringify({ expiryDate: expiryDate }),
                    headers: {
                        'RequestVerificationToken': $('input[name="__RequestVerificationToken"]').val()
                    },
                    success: function(response) {
                        if (response.success) {
                            $('#emailProgressBar').css('width', '100%').removeClass('progress-bar-animated')
                                                .addClass('bg-success');
                            $('#progressText').html('<i class="fas fa-check-circle me-2"></i>Global expiry date set successfully!');
                            setTimeout(function() {
                                loadingModal.hide();
                                showToast('success', 'Global expiry date updated successfully');
                                window.location.reload();
                            }, 1500);
                        } else {
                            loadingModal.hide();
                            showToast('error', response.message || 'Failed to set global expiry date');
                        }
                    },
                    error: function(xhr) {
                        loadingModal.hide();
                        showToast('error', 'Error setting global expiry date');
                        console.error("Error:", xhr.responseText);
                    }
                });
            });

            // Helper function for toast notifications
            function showToast(type, message) {
                const toast = $(`
                    <div class="toast align-items-center text-white bg-${type} border-0" role="alert" aria-live="assertive" aria-atomic="true">
                        <div class="d-flex">
                            <div class="toast-body">
                                ${message}
                            </div>
                            <button type="button" class="btn-close btn-close-white me-2 m-auto" data-bs-dismiss="toast" aria-label="Close"></button>
                        </div>
                    </div>
                `);
                
                $('.toast-container').append(toast);
                const bsToast = new bootstrap.Toast(toast[0]);
                bsToast.show();
                
                toast.on('hidden.bs.toast', function() {
                    $(this).remove();
                });
            }
        });
    </script>
}